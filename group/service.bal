// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import ballerina/http;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhirr4;
import ballerinax/health.fhir.r4.international401;
import ballerina/uuid;
import ballerina/log;
import ballerina/time;

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Group r4:Group|<other_Group_Profile>;
public type Group international401:Group;

configurable SearchServerConfig searchServerConfig = ?;
configurable BulkExportServerConfig exportServiceConfig = ?;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service / on new fhirr4:Listener(9090, apiConfig) {

    // Implementation of the $export operation
    isolated resource function get fhir/r4/Group/[string id]/\$export(r4:FHIRContext fhirContext) returns r4:FHIRError|r4:OperationOutcome|error {

        // http:Client httpClient = check new (exportServiceUrl);
        // http:Response response = check httpClient->post("/api/export/Patient", parameters, {"Content-Type": "application/json", "prefer": "respond-async", "accept": "application/fhir+json"});
        // string|http:HeaderNotFoundError contentLocation = response.getHeader("Content-Location");
        // string statusUrl = "";
        // if contentLocation is string {
        //     statusUrl = contentLocation;
        // } else {
        //     return r4:createFHIRError("An error has been occured in the kick-off request. Please retry the export.", r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        // }

        string exportTaskId = uuid:createType1AsString();
        string groupId = id;
        log:printDebug(string `Exporting data for ID: ${groupId}`);
        string statusUrl = string `${exportServiceConfig.baseUrl}/fhir/bulkstatus/${exportTaskId}`;
        error? executionResult = executeJob(exportTaskId, searchServerConfig, exportServiceConfig, groupId);
        if executionResult is error {
            log:printError("Error occurred: ", executionResult);
            return r4:createFHIRError("Server Error", r4:ERROR, r4:PROCESSING, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
        addExportTasktoMemory(exportTaskId, time:utcNow());

        string diagnosticsText = string `Your request has been accepted. You can check its status at ${statusUrl}`;
        r4:OperationOutcome kickoffResponse = {

            issue: [
                {
                    severity: "information",
                    code: "processing",
                    diagnostics: diagnosticsText
                }
            ]
        };
        fhirContext.setProperty("$Header:Content-Location", statusUrl);

        return kickoffResponse;
    }

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Group/[string id] (r4:FHIRContext fhirContext) returns Group|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Group/[string id]/_history/[string vid] (r4:FHIRContext fhirContext) returns Group|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Group (r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Group (r4:FHIRContext fhirContext, Group procedure) returns Group|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Group/[string id] (r4:FHIRContext fhirContext, Group group) returns Group|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Group/[string id] (r4:FHIRContext fhirContext, json patch) returns Group|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Group/[string id] (r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Group/[string id]/_history (r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Group/_history (r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}
